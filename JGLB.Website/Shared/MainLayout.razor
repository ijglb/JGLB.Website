@using JGLB.Website.Data;
@inherits LayoutComponentBase
@*@implements IDisposable
@inject IJSRuntime Js*@

<PageTitle>极光萝卜</PageTitle>

<Layout Background="Background.Body" Overflow="Overflow.Auto">
    <LayoutHeader Fixed>
        <NavMenu @ref="_NavMenu" />
    </LayoutHeader>
    <LayoutContent Margin="Margin.Is5.FromTop">
        <Container Fluid Margin="Margin.Is3.FromTop">
            <Card Background="Background.Secondary" Style="min-height: calc(100vh - 56px - 21px - 20px);">
                <CardBody>
                    <CascadingValue Value="_NavMenu" IsFixed>
                        @Body
                    </CascadingValue>
                </CardBody>
            </Card>
        </Container>
    </LayoutContent>
    <LayoutFooter>
        <Div TextAlignment="TextAlignment.Center">
            <Text>&copy; 2016 - @_Year 极光萝卜 | </Text><Link TextColor="TextColor.Primary" To="http://beian.miit.gov.cn" Target="Target.Blank">闽ICP备16005039号-1</Link>
        </Div>
    </LayoutFooter>
</Layout>

@code
        {
    private string _Year = DateTime.Now.Year.ToString();

    private NavMenu? _NavMenu;
    //private string _CardContentHeight = "";
    //private string _CardStyle => $"{_CardContentHeight}";
    //private Card? _Card;
    //private readonly Queue<Func<Task>> _afterRenderCallQuene = new Queue<Func<Task>>();
    //private decimal _TempHeight;
    //private decimal _TabHeight;
    //private decimal _FooterHeight;

    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();
    //    AppEx.OnWindowResize += OnWindowResize;
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await base.OnAfterRenderAsync(firstRender);
    //    if (firstRender)
    //    {
    //        var jq = await Js.InvokeAsync<IJSObjectReference>("mdui.$", "#app-tab");
    //        _TabHeight = await jq.InvokeAsync<decimal>("height");
    //        await jq.DisposeAsync();
    //        jq = await Js.InvokeAsync<IJSObjectReference>("mdui.$", "#footer");
    //        _FooterHeight = await jq.InvokeAsync<decimal>("height");
    //        await jq.DisposeAsync();
    //        //_TempHeight = jq.InvokeAsync<decimal>("window.");
    //    }
    //    if (_afterRenderCallQuene.Count > 0)
    //    {
    //        var actions = _afterRenderCallQuene.ToArray();
    //        _afterRenderCallQuene.Clear();
    //        foreach (var action in actions)
    //        {
    //            await action();
    //        }
    //    }
    //}

    //protected void OnWindowResize(object? sender, Window e)
    //{
    //    if (_TempHeight != e.InnerHeight)
    //    {
    //        _TempHeight = e.InnerHeight;
    //        _afterRenderCallQuene.Enqueue(async () =>
    //        {
    //            var tempHeight = _TempHeight - _TabHeight - _FooterHeight - 8;
    //            var tempStyle = $"min-height:{tempHeight}px;";
    //            if (tempStyle != _CardContentHeight)
    //            {
    //                _CardContentHeight = tempStyle;
    //                StateHasChanged();
    //            }
    //            await Task.CompletedTask;
    //        });
    //        InvokeAsync(StateHasChanged);
    //    }
    //}

    //public void Dispose()
    //{
    //    AppEx.OnWindowResize -= OnWindowResize;
    //}
}