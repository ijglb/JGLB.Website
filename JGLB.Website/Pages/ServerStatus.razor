@page "/server-status"
@using JGLB.Common;
@using JGLB.Website.Data;
@using JGLB.Website.Service;
@implements IDisposable
@inject ServerStatusService _ServerStatusService;

<MyPageTitle>@AppEx.Title("服务器状态监控")</MyPageTitle>

<Row VerticalGutter="16">
    @foreach (var server in _Servers)
    {
        <Column ColumnSize="ColumnSize.Is3.OnWidescreen.Is4.OnDesktop.Is6.OnTablet.Is12.OnMobile" @key="server.host">
            <Card>
                <CardHeader>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is2">
                            <Icon TextColor="@(server.Online ? TextColor.Success : TextColor.Muted)" Name="@(server.IsWin ? MyIconfont.windows : MyIconfont.linux)" IconSize="IconSize.x3" />
                        </Column>
                        <Column ColumnSize="ColumnSize.Is10">
                            <CardTitle TextOverflow="TextOverflow.Truncate">@server.name</CardTitle>
                            <CardText TextOverflow="TextOverflow.Truncate">@server.location</CardText>
                        </Column>
                    </Row>
                </CardHeader>
                <ListGroup Flush>
                <ListGroupItem>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is3" TextOverflow="TextOverflow.Truncate">
                            在线时间
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9">
                            @(server.Online ? server.uptime : "-")
                            </Column>
                        </Row>
                    </ListGroupItem>
                    <ListGroupItem>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                负载
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                @(server.Online ? server.load_1 : "-")
                            </Column>
                        </Row>
                    </ListGroupItem>
                    <ListGroupItem>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                CPU
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Progress Value="@(server.Online ? (int)server.cpu : 0)" Color="@(server.cpu > 74 ? server.cpu > 98 ? Color.Danger : Color.Warning : Color.Success)">
                                    @(server.Online ? $"{server.cpu} %" : "-")
                                </Progress>
                            </Column>
                        </Row>
                    </ListGroupItem>
                    <ListGroupItem>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                内存
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Progress Value="@(server.Online ? (int)(server.MemoryUsage * 100) : 0)" Color="@(server.MemoryUsage > 0.74m ? server.MemoryUsage > 0.89m ? Color.Danger : Color.Warning : Color.Success)">
                                    @(server.Online ? $"{BytesToSize(server.memory_used * 1024)} / {BytesToSize(server.memory_total * 1024)}" : "-")
                                </Progress>
                            </Column>
                        </Row>
                    </ListGroupItem>
                    <ListGroupItem>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                Swap
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Progress Value="@(server.Online ? (int)(server.SwapUsage * 100) : 0)" Color="@(server.SwapUsage > 0.74m ? server.SwapUsage > 0.89m ? Color.Danger : Color.Warning : Color.Success)">
                                    @(server.Online && server.swap_total > 0 ? $"{BytesToSize(server.swap_used * 1024)} / {BytesToSize(server.swap_total * 1024)}" : "-")
                                </Progress>
                            </Column>
                        </Row>
                    </ListGroupItem>
                    <ListGroupItem>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                硬盘
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Progress Value="@(server.Online ? (int)(server.HDDUsage * 100) : 0)" Color="@(server.HDDUsage > 0.74m ? server.HDDUsage > 0.89m ? Color.Danger : Color.Warning : Color.Success)">
                                    @(server.Online ? $"{BytesToSize(server.hdd_used * 1024 * 1024)} / {BytesToSize(server.hdd_total * 1024 * 1024)}" : "-")
                                </Progress>
                            </Column>
                        </Row>
                    </ListGroupItem>
                    <ListGroupItem>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                @(server.IsWin ? "流量" : "月流量")
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                @(server.Online ? $"入：{BytesToSize(server.network_in)} | 出：{BytesToSize(server.network_out)}" : "-")
                            </Column>
                        </Row>
                    </ListGroupItem>
                    <ListGroupItem>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                网络
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                @(server.Online ? $"入：{BytesToSize(server.network_rx)} | 出：{BytesToSize(server.network_tx)}" : "-")
                            </Column>
                        </Row>
                    </ListGroupItem>
                </ListGroup>
            </Card>
        </Column>
    }
</Row>
<Divider DividerType="DividerType.TextContent" Text="@Updated"  Margin="Margin.Is5.OnY"/>

@code {
    private ServerStats[] _Servers = Array.Empty<ServerStats>();

    private string _Updated ="";
    private string Updated => string.IsNullOrEmpty(_Updated) ? "加载中..." : $"最后更新时间：{DateTimeHelper.FromUnixTimeSeconds(long.Parse(_Updated)).MyFormat()}";
    private System.Timers.Timer _Timer;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _Timer = new System.Timers.Timer(2000);
        _Timer.Elapsed += OnTimerElapsed;
        Task.Factory.StartNew(() => OnTimerElapsed(null, null));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender && !_Timer.Enabled)
        {
            _Timer.Start();
        }
    }

    private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        var response = _ServerStatusService.GetServerStats().Result;
        if (response != null)
        {
            _Updated = response.updated;
            _Servers = response.servers;
            InvokeAsync(StateHasChanged);
        }
    }

    private string BytesToSize(long bytes, int precision = 2, bool is1000 = false)
    {
        long kilobyte = 1024;
        long megabyte = kilobyte * 1024;
        long gigabyte = megabyte * 1024;
        long terabyte = gigabyte * 1024;
        if (is1000)
        {
            kilobyte = 1000;
            megabyte = kilobyte * 1000;
            gigabyte = megabyte * 1000;
            terabyte = gigabyte * 1000;
        }
        string ret = "";
        if (bytes >= 0 && bytes < kilobyte)
        {
            return $"{bytes} B";
        }
        else if (bytes >= kilobyte && bytes < megabyte)
        {
            ret = $"{Math.Round((decimal)bytes / kilobyte, precision).ToString("F")} K";
        }
        else if ((bytes >= megabyte) && (bytes < gigabyte))
        {
            ret = $"{Math.Round((decimal)bytes / megabyte, precision).ToString("F")} M";
        }
        else if ((bytes >= gigabyte) && (bytes < terabyte))
        {
            ret = $"{Math.Round((decimal)bytes / gigabyte, precision).ToString("F")} G";
        }
        else if (bytes >= terabyte)
        {
            ret = $"{Math.Round((decimal)bytes / terabyte, precision).ToString("F")} T";
        }
        else
        {
            return $"{bytes} B";
        }
        return is1000 ? ret + "B" : ret + "iB";
    }

    public void Dispose()
    {
        _Timer.Stop();
    }
}
